image:
  name: golang:1.12-stretch # try: gcr.io/kubebuilder/thirdparty-linux:1.14.1

variables:
  # already the default on the official go image, but not available to the gitlab cache path unless specified here
  GO111MODULE: "on"
  GOARCH: "amd64"
  GOOS: "linux"
  GOPATH: "/go"
  KUSTOMIZE_VERSION: "3.0.1"
  KUBEBUILDER_VERSION: "2.0.0-beta.0"
  KUBEBUILDER_DIR: "/usr/local/kubebuilder"
  DOCKER_TLS_CERTDIR: ""  # https://gitlab.com/gitlab-org/gitlab-runner/issues/4501

before_script:
  - export PATH=$KUBEBUILDER_DIR/bin:$PATH

cache:
  paths:
    - $GOPATH/*
    - $KUBEBUILDER_DIR/*
  key: $CI_COMMIT_SHA

stages:
  - install # install and cache the deps
  - test # build and test the code, lint, etc.
  - build # build the docker image
  - release # release the docker image to registry

install:
  stage: install
  script:
    - echo "installing kubebuilder@$KUBEBUILDER_VERSION, kustomize@$KUSTOMIZE_VERSION"
    # must install kubebuilder until there is an officially supported image
    # see: https://github.com/kubernetes-sigs/kubebuilder/issues/665
    # Install kubebuilder
    - mkdir -p ${KUBEBUILDER_DIR}
    - curl -sL https://go.kubebuilder.io/dl/${KUBEBUILDER_VERSION}/${GOOS}/${GOARCH} | tar -xz -C ${KUBEBUILDER_DIR}
    - DL_NAME=kubebuilder_${KUBEBUILDER_VERSION}_${GOOS}_${GOARCH}
    - mv $KUBEBUILDER_DIR/${DL_NAME}/bin $KUBEBUILDER_DIR/bin
    - rm -rf ${KUBEBUILDER_DIR}/${DL_NAME}
    - export PATH=$KUBEBUILDER_DIR/bin:$PATH
    # Install kustomize
    - KUSTOMIZE_DL=kustomize_${KUSTOMIZE_VERSION}_${GOOS}_${GOARCH}
    - curl -O -L https://github.com/kubernetes-sigs/kustomize/releases/download/v${KUSTOMIZE_VERSION}/${KUSTOMIZE_DL}
    - chmod +x ${KUSTOMIZE_DL}
    - mv ${KUSTOMIZE_DL} bin/kustomize # just pop it in the kubebuilder bin for now
    # Install build deps
    - go mod download

build:
  stage: build
  script:
    - make

lint:
  image: golangci/golangci-lint
  stage: test
  script:
    - make lint

test:
  stage: test
  script:
    - make test

docker-build:
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  image: docker:stable
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  stage: build
  script:
    # pull image from registry so it can be used as a cache for the build command
    - docker pull $CONTAINER_IMAGE:latest || true
    # builds image using the pulled image as a cache (if available), tag it
    - make docker-build
    # push images to local registry for publishing
    - docker push $CONTAINER_IMAGE:$CI_COMMIT_SHA

#docker-push:
#  stage: release
#  image: docker:stable
#  before_script: # TODO: also log into the public registry
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
#  script:
#    # pull image from registry so it can be used as a cache for the build command
#    - docker pull $CONTAINER_IMAGE:$CI_COMMIT_SHA || true
# log in and push to the docker hub
#  - echo "$DOCKER_HUB_PASS" | docker login --username "$DOCKER_HUB_USERNAME" --password-stdin docker.io
