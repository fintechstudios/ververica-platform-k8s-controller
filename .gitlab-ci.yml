variables:
  BUILDER_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH-builder
  RELEASE_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH-release
  DOCKER_TLS_CERTDIR: ""  # https://gitlab.com/gitlab-org/gitlab-runner/issues/4501

before_script:
  - cd /workspace # from Dockerfile_build

image:
  name: $BUILDER_IMAGE:$CI_COMMIT_SHA # built in the install phase
  entrypoint: [""] # override entrypoint to take arbitrary commands

stages:
  - install # install and cache the deps
  - build # build the docker image
  - test # build and test the code, lint, etc.
  - release # release the docker image to registry

install:
  stage: install
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  image: docker:stable
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # per-branch test image will be created and used as the "cache"
    # pull test image from registry so it can be used as a cache for the build command
    - docker pull $BUILDER_IMAGE:$CI_COMMIT_REF_SLUG || true
    # builds the test image using the pulled image as a cache (if available), tag it
    - docker build --cache-from $BUILDER_IMAGE:$CI_COMMIT_REF_SLUG -f Dockerfile_build --tag $RELEASE_IMAGE:$CI_COMMIT_SHA --tag $BUILDER_IMAGE:$CI_COMMIT_REF_SLUG .
    # push test images to use for subsequent builds
    - docker push $BUILDER_IMAGE:$CI_COMMIT_SHA
    - docker push $BUILDER_IMAGE:$CI_COMMIT_REF_SLUG

build:
  stage: build
  variables:
    GIT_STRATEGY: none
  script:
    - make

lint:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - make lint

test:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - make test

release-docker-build:
  stage: release
  variables:
    DOCKER_DRIVER: overlay2
    GIT_STRATEGY: none
  services:
    - docker:dind
  image: docker:stable
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # use the commit's builder image
    - docker pull $BUILDER_IMAGE:$CI_COMMIT_SHA
    # builds image using the pulled image as a cache (if available), tag it
    - docker build --cache-from $BUILDER_IMAGE:$CI_COMMIT_REF_SLUG -f Dockerfile --tag $RELEASE_IMAGE:$CI_COMMIT_SHA .
    # push images to local registry for publishing
    - docker push $RELEASE_IMAGE:$CI_COMMIT_SHA

#docker-push:
#  stage: release
#  image: docker:stable
#  before_script: # TODO: also log into the public registry
#    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
#  script:
#    # pull image from registry so it can be used as a cache for the build command
#    - docker pull $CONTAINER_IMAGE:$CI_COMMIT_SHA || true
# log in and push to the docker hub
#  - echo "$DOCKER_HUB_PASS" | docker login --username "$DOCKER_HUB_USERNAME" --password-stdin docker.io
