variables:
  DOCKER_HUB_IMAGE_REPO: index.docker.io/fintechstudios/ververica-platform-k8s-operator
  GL_IMAGE_REPO: registry.gitlab.com/$CI_PROJECT_PATH
  BUILDER_BRANCH_TAG: builder-$CI_COMMIT_REF_SLUG
  BUILDER_COMMIT_TAG: builder-$CI_COMMIT_SHA
  RELEASE_COMMIT_TAG: release-$CI_COMMIT_SHA
  DOCKER_TLS_CERTDIR: ""  # https://gitlab.com/gitlab-org/gitlab-runner/issues/4501

before_script:
  - cd /workspace # from Dockerfile_build

image:
  name: $GL_IMAGE_REPO:$BUILDER_COMMIT_TAG # built in the install stage
  entrypoint: [""] # override entrypoint to take arbitrary commands

stages:
  - install # install and cache the deps
  - build # build the docker image
  - test # build and test the code, lint, etc.
  - pre-release # build the release image
  - release # tag and release the docker image to repositories

install:
  stage: install
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  image: docker:stable
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # per-branch test image will be created and used as the "cache"
    # pull test image from registry so it can be used as a cache for the build command
    - docker pull $GL_IMAGE_REPO:$BUILDER_BRANCH_TAG || true
    # builds the test image using the pulled image as a cache (if available), tag it
    - "docker build \
        --cache-from $GL_IMAGE_REPO:$BUILDER_BRANCH_TAG \
        -f Dockerfile_build \
        --tag $GL_IMAGE_REPO:$BUILDER_BRANCH_TAG \
        --tag $GL_IMAGE_REPO:$BUILDER_COMMIT_TAG \
        ."
    # push test images to use for subsequent builds
    - docker push $GL_IMAGE_REPO:$BUILDER_BRANCH_TAG
    - docker push $GL_IMAGE_REPO:$BUILDER_COMMIT_TAG

build:
  stage: build
  variables:
    GIT_STRATEGY: none
  script:
    - make

lint:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - make lint

test:
  stage: test
  variables:
    GIT_STRATEGY: none
  script:
    - make test

release-docker-build:
  stage: pre-release
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  image: docker:stable
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  needs:
    - install
  script:
    # use the commit's builder image
    - docker pull $GL_IMAGE_REPO:$BUILDER_COMMIT_TAG
    # builds image using the pulled image as a cache and tag it
    - "docker build \
        --build-arg BUILD_IMG=$GL_IMAGE_REPO:$BUILDER_COMMIT_TAG \
        --build-arg GIT_COMMIT=$CI_COMMIT_SHA \
        --build-arg VERSION=$CI_COMMIT_TAG \
        -f Dockerfile \
        --tag $GL_IMAGE_REPO:$RELEASE_COMMIT_TAG \
        ."
    # push release images to local registry for publishing
    - docker push $GL_IMAGE_REPO:$RELEASE_COMMIT_TAG

# Two release stages - one for tags and one for latest on master
.docker-releaser: &docker-releaser
  stage: release
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    # pull image from registry so it can be used as a cache for the build command
    - docker pull $GL_IMAGE_REPO:$RELEASE_COMMIT_TAG
    # log in and push to the docker hub
    - echo "$DOCKER_HUB_PASS" | docker login --username "$DOCKER_HUB_USERNAME" --password-stdin docker.io
    - docker tag $GL_IMAGE_REPO:$RELEASE_COMMIT_TAG $DOCKER_HUB_IMAGE_REPO:$RELEASE_TAG
    - docker push $DOCKER_HUB_IMAGE_REPO:$RELEASE_TAG

# Release all tags
docker-release-tags:
  <<: *docker-releaser
  only:
    - tags
  variables:
    RELEASE_TAG: $CI_COMMIT_TAG

# Release the commit version only on master, but not the tag as that will be run elsewhere
docker-release-commit:
  <<: *docker-releaser
  only:
    - /^master$/
  except:
    refs:
      - tags
  variables:
    RELEASE_TAG: $CI_COMMIT_SHA

# Release the latest version only on master, but not the tag as that will be run elsewhere
docker-release-latest:
  <<: *docker-releaser
  only:
    - /^master$/
  except:
    refs:
      - tags
  variables:
    RELEASE_TAG: latest
