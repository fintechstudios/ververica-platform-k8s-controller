// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appmanagerapi "github.com/fintechstudios/ververica-platform-k8s-operator/pkg/vvp/appmanager-api"

	mock "github.com/stretchr/testify/mock"
)

// DeploymentsService is an autogenerated mock type for the DeploymentsService type
type DeploymentsService struct {
	mock.Mock
}

// CreateDeployment provides a mock function with given fields: ctx, namespaceName, dep
func (_m *DeploymentsService) CreateDeployment(ctx context.Context, namespaceName string, dep appmanagerapi.Deployment) (*appmanagerapi.Deployment, error) {
	ret := _m.Called(ctx, namespaceName, dep)

	var r0 *appmanagerapi.Deployment
	if rf, ok := ret.Get(0).(func(context.Context, string, appmanagerapi.Deployment) *appmanagerapi.Deployment); ok {
		r0 = rf(ctx, namespaceName, dep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmanagerapi.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, appmanagerapi.Deployment) error); ok {
		r1 = rf(ctx, namespaceName, dep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeployment provides a mock function with given fields: ctx, namespaceName, id
func (_m *DeploymentsService) DeleteDeployment(ctx context.Context, namespaceName string, id string) (*appmanagerapi.Deployment, error) {
	ret := _m.Called(ctx, namespaceName, id)

	var r0 *appmanagerapi.Deployment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *appmanagerapi.Deployment); ok {
		r0 = rf(ctx, namespaceName, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmanagerapi.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespaceName, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: ctx, namespaceName, id
func (_m *DeploymentsService) GetDeployment(ctx context.Context, namespaceName string, id string) (*appmanagerapi.Deployment, error) {
	ret := _m.Called(ctx, namespaceName, id)

	var r0 *appmanagerapi.Deployment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *appmanagerapi.Deployment); ok {
		r0 = rf(ctx, namespaceName, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmanagerapi.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespaceName, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentByName provides a mock function with given fields: ctx, namespaceName, name
func (_m *DeploymentsService) GetDeploymentByName(ctx context.Context, namespaceName string, name string) (*appmanagerapi.Deployment, error) {
	ret := _m.Called(ctx, namespaceName, name)

	var r0 *appmanagerapi.Deployment
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *appmanagerapi.Deployment); ok {
		r0 = rf(ctx, namespaceName, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmanagerapi.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespaceName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: ctx, namespaceName
func (_m *DeploymentsService) ListDeployments(ctx context.Context, namespaceName string) (*appmanagerapi.ResourceListOfDeployment, error) {
	ret := _m.Called(ctx, namespaceName)

	var r0 *appmanagerapi.ResourceListOfDeployment
	if rf, ok := ret.Get(0).(func(context.Context, string) *appmanagerapi.ResourceListOfDeployment); ok {
		r0 = rf(ctx, namespaceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmanagerapi.ResourceListOfDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespaceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeployment provides a mock function with given fields: ctx, namespaceName, id, dep
func (_m *DeploymentsService) UpdateDeployment(ctx context.Context, namespaceName string, id string, dep appmanagerapi.Deployment) (*appmanagerapi.Deployment, error) {
	ret := _m.Called(ctx, namespaceName, id, dep)

	var r0 *appmanagerapi.Deployment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, appmanagerapi.Deployment) *appmanagerapi.Deployment); ok {
		r0 = rf(ctx, namespaceName, id, dep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmanagerapi.Deployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, appmanagerapi.Deployment) error); ok {
		r1 = rf(ctx, namespaceName, id, dep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
